apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'com.google.protobuf'


ext {
    supportLibraryVersion = '25.4.0'
    grpcVersion = '1.4.0'
}

android {
    useLibrary 'org.apache.http.legacy'
    signingConfigs {
        release {
            keyAlias 'csjbot'
            keyPassword 'root1234'
            storeFile file('../csjbotKeyStore.jks')
            storePassword 'root1234'
        }
    }

    productFlavors {
        dev {
            // Minimum version with platform multi-dex support
            minSdkVersion 21
        }
        prod {
            // Minimum version that can run gRPC (TLS extension)
            minSdkVersion 16
        }
    }

    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions { javaMaxHeapSize "4g" }
    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]

//        如果是给测试的版本，就类似 TE_ + showName + versionName + buildVersion
//                               【TE_】+【SnowBot_】+【V1.0.1SP3】+【.0001】
        if (RELEASE_VERSION.toBoolean()) {
            versionName rootProject.ext.android["versionName"]
        } else {
            if (DEV_VERSION.toBoolean()) {
                versionName "DEV_" + rootProject.ext.android["showName"] + rootProject.ext.android["versionName"] + rootProject.ext.android["buildVersion"]
            } else {
                versionName "TE_" + rootProject.ext.android["showName"] + rootProject.ext.android["versionName"] + rootProject.ext.android["buildVersion"]
            }
        }

        multiDexEnabled true

        ndk {
            moduleName "ndkVidyoSample"
            ldLibs "log"
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"

        }
        sourceSets.main {
            jni.srcDirs = [] //disable automatic ndk-build call
            jniLibs.srcDir "src/main/libs"
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //这里修改apk文件名
                def fileName = "${rootProject.ext.android["showName"]}" +
                        "${rootProject.ext.android["versionName"]}${rootProject.ext.android["buildVersion"]}.apk";
                if (!RELEASE_VERSION.toBoolean()) {
                    if (DEV_VERSION.toBoolean()) {
                        fileName = "DEV_" + fileName;
                    } else {
                        fileName = "TE_" + fileName;
                    }
                }
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }

    lintOptions {
        disable 'MissingTranslation'
    }

    sourceSets {
        main {
            res.srcDirs =
                    [
                            'src/main/res',
                            'src/main/res/layouts',
                            'src/main/res/face',
                    ]
        }
    }


    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            debuggable true
            signingConfig signingConfigs.release
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.release
        }
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
        resolutionStrategy.force "com.android.support:support-annotations:$supportLibraryVersion"
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}


protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.3.0'
    }
    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile rootProject.ext.dependencies["netty"]
    // 解除 64k方法 限制
    compile rootProject.ext.dependencies["multidex"]
    compile rootProject.ext.dependencies["support_design"]
    compile rootProject.ext.dependencies["appcompat_v7"]
    compile rootProject.ext.dependencies["logger"]
    compile rootProject.ext.dependencies["analytics"]
    compile rootProject.ext.dependencies["bugly_crashreport"]
    compile rootProject.ext.dependencies["nativecrashreport"]
    compile rootProject.ext.dependencies["picasso"]
    compile rootProject.ext.dependencies["material_dialogs"]
    // https://github.com/markushi/android-circlebutton/
    compile rootProject.ext.dependencies["circlebutton"]
    compile rootProject.ext.dependencies["load_toast"]
    //显示到选择按钮或者删除按钮的过度动画。而且toast 的生命周期是完全取决于你的。

    // https://github.com/code-mc/loadtoast
    compile rootProject.ext.dependencies["load_toast"]
    // 基于手势的翻转视图  https://github.com/sasakicks/DraggableFlipView
    compile rootProject.ext.dependencies["draggable_flipview"]
    // zxing 把string转为QRCode
    compile rootProject.ext.dependencies["fastjson"]
    compile rootProject.ext.dependencies["HoloColorPicker"]
    compile rootProject.ext.dependencies["glide"]
    compile rootProject.ext.dependencies["exoplayer"]
    compile rootProject.ext.dependencies["animatecheckbox"]
    compile rootProject.ext.dependencies["okhttp3"]
    compile rootProject.ext.dependencies["butterknife"]
    apt rootProject.ext.dependencies["butterknife_apt"]
    compile rootProject.ext.dependencies["okhttp3_integration"]
    compile rootProject.ext.dependencies["MagicIndicator"]
    compile rootProject.ext.dependencies["PickerView"]
    compile rootProject.ext.dependencies["eventbus"]
    // 获取汉字的拼音
    compile files('libs/pinyin4j-2.5.0.jar')
    // 核心播放器，不能改
    compile rootProject.ext.dependencies["exoplayer"]
    // 取色器
    compile rootProject.ext.dependencies["HoloColorPicker"]
    compile(name: 'snowbot-sdk-1.1.3', ext: 'aar')
    compile(name: 'jcvideoplayer-lib-release', ext: 'aar')
    compile(name: 'duersdklib-release', ext: 'aar')
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.tbruyelle.rxpermissions:rxpermissions:0.9.1@aar'
    compile 'com.github.chrisbanes.photoview:library:1.2.3'
    compile 'com.github.chenBingX:SuperTextView:v1.3'
    compile 'com.xw.repo:bubbleseekbar:3.5-lite'
    compile 'com.github.Jay-Goo:RangeSeekBar:v1.0.7'
    testCompile 'junit:junit:4.12'
    // Support libraries
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:cardview-v7:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    // gRPC
    compile "io.grpc:grpc-okhttp:$grpcVersion"
    compile "io.grpc:grpc-protobuf-lite:$grpcVersion"
    compile "io.grpc:grpc-stub:$grpcVersion"
    compile 'javax.annotation:javax.annotation-api:1.2'
    protobuf 'com.google.protobuf:protobuf-java:3.3.1'
    compile 'io.grpc:grpc-core:1.4.0'
    // OAuth2 for Google API
    compile('com.google.auth:google-auth-library-oauth2-http:0.7.0') {
        exclude module: 'httpclient'
    }
    compile files('libs/aliai.jar')
}
